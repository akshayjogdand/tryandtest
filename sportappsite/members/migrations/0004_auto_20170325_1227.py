# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-25 12:27
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("members", "0003_auto_20170325_1147"),
    ]

    operations = [
        migrations.CreateModel(
            name="MemberGroupRules",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="members.MemberGroup",
                    ),
                ),
            ],
        ),
        migrations.RemoveField(model_name="groupplayerscoringmethod", name="group",),
        migrations.RemoveField(
            model_name="grouppostmatchpredictionscoringmethod", name="group",
        ),
        migrations.RemoveField(
            model_name="grouppredictionscoringmethod", name="group",
        ),
        migrations.RemoveField(
            model_name="groupsubmissionvalidationrule", name="group",
        ),
        migrations.AddField(
            model_name="groupplayerscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AddField(
            model_name="groupplayerscoringmethod",
            name="calculation",
            field=models.TextField(
                default=" _performance * rule.points_or_factor", max_length=750
            ),
        ),
        migrations.AddField(
            model_name="groupplayerscoringmethod",
            name="is_default",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="groupplayerscoringmethod",
            name="is_enabled",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="groupplayerscoringmethod",
            name="name",
            field=models.CharField(default="", max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="groupplayerscoringmethod",
            name="notes",
            field=models.TextField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="groupplayerscoringmethod",
            name="points_or_factor",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="groupplayerscoringmethod",
            name="variables",
            field=models.CharField(
                default="rule, XXX_performance",
                help_text="Replace XXX_perfromance with any combination of:\n                      batting_performance, bowling_performance,\n                      fielding_performance, player_match_stats",
                max_length=100,
            ),
        ),
        migrations.AddField(
            model_name="grouppostmatchpredictionscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AddField(
            model_name="grouppostmatchpredictionscoringmethod",
            name="calculation",
            field=models.TextField(
                default=" _performance * rule.points_or_factor", max_length=750
            ),
        ),
        migrations.AddField(
            model_name="grouppostmatchpredictionscoringmethod",
            name="is_default",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="grouppostmatchpredictionscoringmethod",
            name="is_enabled",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="grouppostmatchpredictionscoringmethod",
            name="name",
            field=models.CharField(default="", max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="grouppostmatchpredictionscoringmethod",
            name="notes",
            field=models.TextField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="grouppostmatchpredictionscoringmethod",
            name="points_or_factor",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="grouppostmatchpredictionscoringmethod",
            name="variables",
            field=models.CharField(
                default="rule, XXX_performance",
                help_text="Replace XXX_perfromance with any combination of:\n                      batting_performance, bowling_performance,\n                      fielding_performance, player_match_stats",
                max_length=100,
            ),
        ),
        migrations.AddField(
            model_name="grouppredictionscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AddField(
            model_name="grouppredictionscoringmethod",
            name="calculation",
            field=models.TextField(
                default=" _performance * rule.points_or_factor", max_length=750
            ),
        ),
        migrations.AddField(
            model_name="grouppredictionscoringmethod",
            name="is_default",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="grouppredictionscoringmethod",
            name="is_enabled",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="grouppredictionscoringmethod",
            name="name",
            field=models.CharField(default="", max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="grouppredictionscoringmethod",
            name="notes",
            field=models.TextField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="grouppredictionscoringmethod",
            name="points_or_factor",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="grouppredictionscoringmethod",
            name="variables",
            field=models.CharField(
                default="rule, XXX_performance",
                help_text="Replace XXX_perfromance with any combination of:\n                      batting_performance, bowling_performance,\n                      fielding_performance, player_match_stats",
                max_length=100,
            ),
        ),
        migrations.AddField(
            model_name="groupsubmissionvalidationrule",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AddField(
            model_name="groupsubmissionvalidationrule",
            name="calculation",
            field=models.TextField(
                default=" _performance * rule.points_or_factor", max_length=750
            ),
        ),
        migrations.AddField(
            model_name="groupsubmissionvalidationrule",
            name="is_default",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="groupsubmissionvalidationrule",
            name="is_enabled",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="groupsubmissionvalidationrule",
            name="name",
            field=models.CharField(default="", max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="groupsubmissionvalidationrule",
            name="notes",
            field=models.TextField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="groupsubmissionvalidationrule",
            name="points_or_factor",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="groupsubmissionvalidationrule",
            name="variables",
            field=models.CharField(
                default="rule, XXX_performance",
                help_text="Replace XXX_perfromance with any combination of:\n                      batting_performance, bowling_performance,\n                      fielding_performance, player_match_stats",
                max_length=100,
            ),
        ),
        migrations.AddField(
            model_name="membergrouprules",
            name="player_scoring_rules",
            field=models.ManyToManyField(
                blank=True, null=True, to="members.GroupPlayerScoringMethod"
            ),
        ),
        migrations.AddField(
            model_name="membergrouprules",
            name="post_match_prediction_scoring_rules",
            field=models.ManyToManyField(
                blank=True,
                null=True,
                to="members.GroupPostMatchPredictionScoringMethod",
            ),
        ),
        migrations.AddField(
            model_name="membergrouprules",
            name="prediction_scoring_rules",
            field=models.ManyToManyField(
                blank=True, null=True, to="members.GroupPredictionScoringMethod"
            ),
        ),
        migrations.AddField(
            model_name="membergrouprules",
            name="prediction_validation_rules",
            field=models.ManyToManyField(
                blank=True, null=True, to="members.GroupSubmissionValidationRule"
            ),
        ),
    ]
