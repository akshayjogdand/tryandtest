# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-19 08:03
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="City",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
            options={"verbose_name_plural": "cities",},
        ),
        migrations.CreateModel(
            name="Club",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
            options={"verbose_name_plural": "countries",},
        ),
        migrations.CreateModel(
            name="Match",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=100)),
                ("match_date", models.DateTimeField()),
                ("match_number", models.IntegerField()),
                (
                    "match_type",
                    models.IntegerField(choices=[(1, "One Day"), (2, "T-20")]),
                ),
                (
                    "match_outcome",
                    models.IntegerField(
                        choices=[(1, "Drawn"), (2, "Completed"), (3, "Scheduled")]
                    ),
                ),
                ("first_innings_runs", models.IntegerField(default=0)),
                ("first_innings_balls", models.IntegerField(default=0)),
                ("second_innings_runs", models.IntegerField(default=0)),
                ("second_innings_balls", models.IntegerField(default=0)),
                ("maximum_overs", models.IntegerField(default=20)),
                ("available_overs", models.IntegerField(default=20)),
                ("first_innings_overs", models.IntegerField(default=0)),
                ("second_innings_overs", models.IntegerField(default=0)),
                ("calculated_winning_score", models.IntegerField(default=0)),
                ("winning_score", models.IntegerField(blank=True, default=0)),
                ("first_innings_wickets", models.IntegerField(blank=True, default=0)),
                ("second_innings_wickets", models.IntegerField(blank=True, default=0)),
                (
                    "toss_outcome",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Heads"), (2, "Tails"), (3, "Unknown")],
                        null=True,
                    ),
                ),
                (
                    "toss_decision",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Bat"), (2, "Bowl"), (2, "Field")],
                        null=True,
                    ),
                ),
                ("first_innings_fours", models.IntegerField(default=0)),
                ("first_innings_sixes", models.IntegerField(default=0)),
                ("first_innings_extras", models.IntegerField(default=0)),
                ("first_innings_noballs", models.IntegerField(default=0)),
                ("first_innings_wides", models.IntegerField(default=0)),
                ("first_innings_byes", models.IntegerField(default=0)),
                ("first_innings_legbyes", models.IntegerField(default=0)),
                ("first_innings_penalties", models.IntegerField(default=0)),
                ("first_innings_catches", models.IntegerField(default=0)),
                ("first_innings_stumpings", models.IntegerField(default=0)),
                ("first_innings_runouts", models.IntegerField(default=0)),
                ("second_innings_fours", models.IntegerField(default=0)),
                ("second_innings_sixes", models.IntegerField(default=0)),
                ("second_innings_extras", models.IntegerField(default=0)),
                ("second_innings_noballs", models.IntegerField(default=0)),
                ("second_innings_wides", models.IntegerField(default=0)),
                ("second_innings_byes", models.IntegerField(default=0)),
                ("second_innings_legbyes", models.IntegerField(default=0)),
                ("second_innings_penalties", models.IntegerField(default=0)),
                ("second_innings_catches", models.IntegerField(default=0)),
                ("second_innings_stumpings", models.IntegerField(default=0)),
                ("second_innings_runouts", models.IntegerField(default=0)),
                ("maximum_overs_balls", models.IntegerField(default=0)),
                ("final_overs", models.IntegerField(default=20)),
                ("final_overs_balls", models.IntegerField(default=0)),
                ("bonus_value", models.FloatField(default=0.0)),
                ("bonus_applicable", models.BooleanField(default=False)),
                ("final_winning_score", models.IntegerField(default=0)),
            ],
            options={"verbose_name_plural": "matches",},
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("born", models.DateTimeField(blank=True, null=True)),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="fixtures.Country",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Squad",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("squad_number", models.IntegerField()),
                (
                    "matches_played",
                    models.CharField(default="Not Played", max_length=15),
                ),
                (
                    "captain",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="fixtures.Player",
                    ),
                ),
                ("players", models.ManyToManyField(blank=True, to="fixtures.Player")),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="fixtures.Country",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tournament",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("start_date", models.DateTimeField(verbose_name="Start Date")),
                ("end_date", models.DateTimeField(verbose_name="End Date")),
                (
                    "club",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="fixtures.Club"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Venue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="fixtures.City"
                    ),
                ),
            ],
            options={"verbose_name_plural": "venues",},
        ),
        migrations.AddField(
            model_name="squad",
            name="team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="fixtures.Team"
            ),
        ),
        migrations.AddField(
            model_name="squad",
            name="wicket_keeper",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="fixtures.Player",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="bat_first_team",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="fixtures.Squad",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="max_fours_by",
            field=models.ManyToManyField(
                blank=True, related_name="_match_max_fours_by_+", to="fixtures.Player"
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="max_sixes_by",
            field=models.ManyToManyField(
                blank=True, related_name="_match_max_sixes_by_+", to="fixtures.Player"
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="team_one",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="match_team_one",
                to="fixtures.Squad",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="team_two",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="match_team_two",
                to="fixtures.Squad",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="toss_winner",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="fixtures.Squad",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="fixtures.Tournament"
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="venue",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="fixtures.Venue"
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="winning_team",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="fixtures.Squad",
            ),
        ),
        migrations.AddField(
            model_name="city",
            name="country",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="fixtures.Country"
            ),
        ),
    ]
