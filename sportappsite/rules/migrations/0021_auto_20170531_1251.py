# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-05-31 12:51
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import python_field.python_field
import rules.models


class Migration(migrations.Migration):

    dependencies = [
        ("rules", "0020_auto_20170506_0610"),
    ]

    operations = [
        migrations.CreateModel(
            name="GroupTournamentScoringMethod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "enable_for_matches",
                    python_field.python_field.PythonCodeField(
                        default="lambda match: True",
                        help_text="e.g. lambda match: match.match_number in [1,2,3]",
                        max_length=50,
                        validators=[rules.models.is_code_and_lambda],
                    ),
                ),
                (
                    "apply_rule_at",
                    models.IntegerField(
                        choices=[
                            (0, "When scoring a Player Performance"),
                            (1, "When validating a Member Prediction"),
                            (2, "When scoring a Member Prediction"),
                            (
                                3,
                                "Apply after Match is finished and\n                                        all Predictions have been scored",
                            ),
                            (4, "Apply on Leaderboards"),
                            (5, "Apply on Tournaments"),
                        ],
                        default=-1,
                        help_text="When to apply a rule (automatically set on save).",
                    ),
                ),
                (
                    "variables",
                    python_field.python_field.PythonCodeField(
                        default="rule, XXX_performance",
                        help_text="Replace XXX_performance with any combination of:\n                      batting_performance, bowling_performance,\n                      fielding_performance, player_match_stats",
                        max_length=100,
                    ),
                ),
                (
                    "functions",
                    python_field.python_field.PythonCodeField(
                        blank=True, max_length=1000, null=True
                    ),
                ),
                (
                    "calculation",
                    python_field.python_field.PythonCodeField(
                        default="rule.points_or_factor if XXX_performance else 0",
                        max_length=750,
                    ),
                ),
                ("points_or_factor", models.IntegerField(default=0)),
                ("is_default", models.BooleanField(default=False)),
                ("is_enabled", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True, max_length=100, null=True)),
                (
                    "apply_changes_to_cloned_rules",
                    models.BooleanField(
                        choices=[
                            (False, "----"),
                            (True, "Apply these changes to ALL clones of this rule."),
                        ],
                        default=False,
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="GroupTournamentScoringMethodResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("input_values", models.TextField(default="", max_length=1000)),
                ("calculation", models.TextField(default="", max_length=750)),
                ("points_or_factor", models.IntegerField(default=0)),
                ("computed_on", models.DateTimeField(auto_now_add=True)),
                ("result", models.CharField(default="0", max_length=20)),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="rules.GroupTournamentScoringMethod",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="TournamentScoringMethod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "enable_for_matches",
                    python_field.python_field.PythonCodeField(
                        default="lambda match: True",
                        help_text="e.g. lambda match: match.match_number in [1,2,3]",
                        max_length=50,
                        validators=[rules.models.is_code_and_lambda],
                    ),
                ),
                (
                    "apply_rule_at",
                    models.IntegerField(
                        choices=[
                            (0, "When scoring a Player Performance"),
                            (1, "When validating a Member Prediction"),
                            (2, "When scoring a Member Prediction"),
                            (
                                3,
                                "Apply after Match is finished and\n                                        all Predictions have been scored",
                            ),
                            (4, "Apply on Leaderboards"),
                            (5, "Apply on Tournaments"),
                        ],
                        default=-1,
                        help_text="When to apply a rule (automatically set on save).",
                    ),
                ),
                (
                    "variables",
                    python_field.python_field.PythonCodeField(
                        default="rule, XXX_performance",
                        help_text="Replace XXX_performance with any combination of:\n                      batting_performance, bowling_performance,\n                      fielding_performance, player_match_stats",
                        max_length=100,
                    ),
                ),
                (
                    "functions",
                    python_field.python_field.PythonCodeField(
                        blank=True, max_length=1000, null=True
                    ),
                ),
                (
                    "calculation",
                    python_field.python_field.PythonCodeField(
                        default="rule.points_or_factor if XXX_performance else 0",
                        max_length=750,
                    ),
                ),
                ("points_or_factor", models.IntegerField(default=0)),
                ("is_default", models.BooleanField(default=False)),
                ("is_enabled", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True, max_length=100, null=True)),
                (
                    "apply_changes_to_cloned_rules",
                    models.BooleanField(
                        choices=[
                            (False, "----"),
                            (True, "Apply these changes to ALL clones of this rule."),
                        ],
                        default=False,
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="TournamentScoringMethodResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("input_values", models.TextField(default="", max_length=1000)),
                ("calculation", models.TextField(default="", max_length=750)),
                ("points_or_factor", models.IntegerField(default=0)),
                ("computed_on", models.DateTimeField(auto_now_add=True)),
                ("result", models.CharField(default="0", max_length=20)),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="rules.TournamentScoringMethod",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.AlterField(
            model_name="groupleaderboardscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                    (4, "Apply on Leaderboards"),
                    (5, "Apply on Tournaments"),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AlterField(
            model_name="groupplayerscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                    (4, "Apply on Leaderboards"),
                    (5, "Apply on Tournaments"),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AlterField(
            model_name="grouppostmatchpredictionscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                    (4, "Apply on Leaderboards"),
                    (5, "Apply on Tournaments"),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AlterField(
            model_name="grouppredictionscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                    (4, "Apply on Leaderboards"),
                    (5, "Apply on Tournaments"),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AlterField(
            model_name="grouppredictionsubmissionvalidationrule",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                    (4, "Apply on Leaderboards"),
                    (5, "Apply on Tournaments"),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AlterField(
            model_name="leaderboardscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                    (4, "Apply on Leaderboards"),
                    (5, "Apply on Tournaments"),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AlterField(
            model_name="playerscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                    (4, "Apply on Leaderboards"),
                    (5, "Apply on Tournaments"),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AlterField(
            model_name="postmatchpredictionscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                    (4, "Apply on Leaderboards"),
                    (5, "Apply on Tournaments"),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AlterField(
            model_name="predictionscoringmethod",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                    (4, "Apply on Leaderboards"),
                    (5, "Apply on Tournaments"),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AlterField(
            model_name="predictionsubmissionvalidationrule",
            name="apply_rule_at",
            field=models.IntegerField(
                choices=[
                    (0, "When scoring a Player Performance"),
                    (1, "When validating a Member Prediction"),
                    (2, "When scoring a Member Prediction"),
                    (
                        3,
                        "Apply after Match is finished and\n                                        all Predictions have been scored",
                    ),
                    (4, "Apply on Leaderboards"),
                    (5, "Apply on Tournaments"),
                ],
                default=-1,
                help_text="When to apply a rule (automatically set on save).",
            ),
        ),
        migrations.AddField(
            model_name="grouptournamentscoringmethod",
            name="parent_rule",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="rules.TournamentScoringMethod",
            ),
        ),
    ]
