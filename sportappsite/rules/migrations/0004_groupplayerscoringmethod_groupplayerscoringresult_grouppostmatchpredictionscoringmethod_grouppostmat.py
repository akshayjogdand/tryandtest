# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-25 14:25
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("rules", "0003_auto_20170325_1147"),
    ]

    operations = [
        migrations.CreateModel(
            name="GroupPlayerScoringMethod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "apply_rule_at",
                    models.IntegerField(
                        choices=[
                            (0, "When scoring a Player Performance"),
                            (1, "When validating a Member Prediction"),
                            (2, "When scoring a Member Prediction"),
                            (
                                3,
                                "Apply after Match is finished and\n                                        all Predictions have been scored",
                            ),
                        ],
                        default=-1,
                        help_text="When to apply a rule (automatically set on save).",
                    ),
                ),
                (
                    "variables",
                    models.CharField(
                        default="rule, XXX_performance",
                        help_text="Replace XXX_perfromance with any combination of:\n                      batting_performance, bowling_performance,\n                      fielding_performance, player_match_stats",
                        max_length=100,
                    ),
                ),
                (
                    "calculation",
                    models.TextField(
                        default=" _performance * rule.points_or_factor", max_length=750
                    ),
                ),
                ("points_or_factor", models.IntegerField(default=0)),
                ("is_default", models.BooleanField(default=False)),
                ("is_enabled", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True, max_length=100, null=True)),
                (
                    "parent_rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="rules.PlayerScoringMethod",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="GroupPlayerScoringResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("input_values", models.CharField(default="", max_length=300)),
                ("calculation", models.TextField(default="", max_length=750)),
                ("points_or_factor", models.IntegerField(default=0)),
                ("computed_on", models.DateTimeField(auto_now_add=True)),
                ("result", models.CharField(default="0", max_length=20)),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="rules.GroupPlayerScoringMethod",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="GroupPostMatchPredictionScoringMethod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "apply_rule_at",
                    models.IntegerField(
                        choices=[
                            (0, "When scoring a Player Performance"),
                            (1, "When validating a Member Prediction"),
                            (2, "When scoring a Member Prediction"),
                            (
                                3,
                                "Apply after Match is finished and\n                                        all Predictions have been scored",
                            ),
                        ],
                        default=-1,
                        help_text="When to apply a rule (automatically set on save).",
                    ),
                ),
                (
                    "variables",
                    models.CharField(
                        default="rule, XXX_performance",
                        help_text="Replace XXX_perfromance with any combination of:\n                      batting_performance, bowling_performance,\n                      fielding_performance, player_match_stats",
                        max_length=100,
                    ),
                ),
                (
                    "calculation",
                    models.TextField(
                        default=" _performance * rule.points_or_factor", max_length=750
                    ),
                ),
                ("points_or_factor", models.IntegerField(default=0)),
                ("is_default", models.BooleanField(default=False)),
                ("is_enabled", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True, max_length=100, null=True)),
                (
                    "parent_rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="rules.PostMatchPredictionScoringMethod",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="GroupPostMatchPredictionScoringMethodResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("input_values", models.CharField(default="", max_length=300)),
                ("calculation", models.TextField(default="", max_length=750)),
                ("points_or_factor", models.IntegerField(default=0)),
                ("computed_on", models.DateTimeField(auto_now_add=True)),
                ("result", models.CharField(default="0", max_length=20)),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="rules.GroupPostMatchPredictionScoringMethod",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="GroupPredictionScoringMethod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "apply_rule_at",
                    models.IntegerField(
                        choices=[
                            (0, "When scoring a Player Performance"),
                            (1, "When validating a Member Prediction"),
                            (2, "When scoring a Member Prediction"),
                            (
                                3,
                                "Apply after Match is finished and\n                                        all Predictions have been scored",
                            ),
                        ],
                        default=-1,
                        help_text="When to apply a rule (automatically set on save).",
                    ),
                ),
                (
                    "variables",
                    models.CharField(
                        default="rule, XXX_performance",
                        help_text="Replace XXX_perfromance with any combination of:\n                      batting_performance, bowling_performance,\n                      fielding_performance, player_match_stats",
                        max_length=100,
                    ),
                ),
                (
                    "calculation",
                    models.TextField(
                        default=" _performance * rule.points_or_factor", max_length=750
                    ),
                ),
                ("points_or_factor", models.IntegerField(default=0)),
                ("is_default", models.BooleanField(default=False)),
                ("is_enabled", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True, max_length=100, null=True)),
                (
                    "parent_rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="rules.PredictionScoringMethod",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="GroupPredictionScoringResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("input_values", models.CharField(default="", max_length=300)),
                ("calculation", models.TextField(default="", max_length=750)),
                ("points_or_factor", models.IntegerField(default=0)),
                ("computed_on", models.DateTimeField(auto_now_add=True)),
                ("result", models.CharField(default="0", max_length=20)),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="rules.GroupPredictionScoringMethod",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="GroupPredictionSubmissionValidationRule",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "apply_rule_at",
                    models.IntegerField(
                        choices=[
                            (0, "When scoring a Player Performance"),
                            (1, "When validating a Member Prediction"),
                            (2, "When scoring a Member Prediction"),
                            (
                                3,
                                "Apply after Match is finished and\n                                        all Predictions have been scored",
                            ),
                        ],
                        default=-1,
                        help_text="When to apply a rule (automatically set on save).",
                    ),
                ),
                (
                    "variables",
                    models.CharField(
                        default="rule, XXX_performance",
                        help_text="Replace XXX_perfromance with any combination of:\n                      batting_performance, bowling_performance,\n                      fielding_performance, player_match_stats",
                        max_length=100,
                    ),
                ),
                (
                    "calculation",
                    models.TextField(
                        default=" _performance * rule.points_or_factor", max_length=750
                    ),
                ),
                ("points_or_factor", models.IntegerField(default=0)),
                ("is_default", models.BooleanField(default=False)),
                ("is_enabled", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True, max_length=100, null=True)),
                (
                    "parent_rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="rules.PredictionSubmissionValidationRule",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="GroupPredictionValidationResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("input_values", models.CharField(default="", max_length=300)),
                ("calculation", models.TextField(default="", max_length=750)),
                ("points_or_factor", models.IntegerField(default=0)),
                ("computed_on", models.DateTimeField(auto_now_add=True)),
                ("result", models.CharField(default="0", max_length=20)),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="rules.GroupPredictionSubmissionValidationRule",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
    ]
